# -*- encoding: utf-8 -*-
# Copyright 2012 Citrix Systems, Inc. Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  Citrix Systems, Inc.
# reserves all rights not expressly granted by the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Automatically generated by addcopyright.py at 04/03/2012
""" P1 tests for Account
"""
#Import Local Modules
from nose.plugins.attrib import attr
from marvin.cloudstackTestCase import *
from marvin.cloudstackAPI import *
from marvin.integration.lib.utils import *
from marvin.integration.lib.base import *
from marvin.integration.lib.common import *
from marvin import remoteSSHClient
import datetime
import pdb


class Services:
    """Test Local Storage For Data Volumes Services
    """

    def __init__(self):
        self.services = {
                        "account": {
                                    "email": "test@test.com",
                                    "firstname": "Test",
                                    "lastname": "User",
                                    "username": "test",
                                    # Random characters are appended for unique
                                    # username
                                    "password": "fr3sca",
                         },
                         "user": {
                                    "email": "user@test.com",
                                    "firstname": "User",
                                    "lastname": "User",
                                    "username": "User",
                                    # Random characters are appended for unique
                                    # username
                                    "password": "fr3sca",
                         },
                         "service_offering": {
                                    "name": "Tiny Instance",
                                    "displaytext": "Tiny Instance",
                                    "cpunumber": 1,
                                    "cpuspeed": 100,
                                    # in MHz
                                    "memory": 128,
                                    # In MBs
                        },
                        "disk_offering": {
                                    "displaytext": "Local Small",
                                    "name": "Local Small",
                                    "disksize": 1,
                                    "storagetype" : "Local"
                        },
                        "volume": {
                                "diskname": "TestLocalDisk",
                                "max": 6,
                        },
                         "virtual_machine": {
                                    "displayname": "Test VM",
                                    "username": "root",
                                    "password": "password",
                                    "ssh_port": 22,
                                    "hypervisor": 'XenServer',
                                    # Hypervisor type should be same as
                                    # hypervisor type of cluster
                                    "privateport": 22,
                                    "publicport": 22,
                                    "protocol": 'TCP',
                         },
                        "natrule": {
                                    "publicport": 22,
                                    "privateport": 22,
                                    "protocol": 'TCP',
                        },
                        "ostype": 'CentOS 5.3 (64-bit)',
                        # Cent OS 5.3 (64 bit)
                        "sleep": 60,
                        "timeout": 10,
                        "mode": 'advanced'
                    }

@unittest.skip("1")     
class TestLocalDiskOffering(cloudstackTestCase):

    @classmethod
    def setUpClass(cls):
        cls.api_client = super(TestLocalDiskOffering, cls).getClsTestClient().getApiClient()
        cls.services = Services().services

        # Get Zone, Domain and templates
        cls.domain = get_domain(cls.api_client, cls.services)
        cls.zone = get_zone(cls.api_client, cls.services)
        template = get_template(
                            cls.api_client,
                            cls.zone.id,
                            cls.services["ostype"]
                            )
        cls.services["zoneid"] = cls.zone.id
        cls.services["virtual_machine"]["zoneid"] = cls.zone.id
        cls.services["virtual_machine"]["template"] = template.id

        # Create VMs, NAT Rules etc
        cls.account = Account.create(
                            cls.api_client,
                            cls.services["account"],
                            domainid=cls.domain.id
                            )

        cls.services["account"] = cls.account.account.name
        cls.service_offering = ServiceOffering.create(
                                            cls.api_client,
                                            cls.services["service_offering"]
                                            )
        cls.virtual_machine = VirtualMachine.create(
                                    cls.api_client,
                                    cls.services["virtual_machine"],
                                    accountid=cls.account.account.name,
                                    domainid=cls.account.account.domainid,
                                    serviceofferingid=cls.service_offering.id,
                                )
        cls._cleanup = [
                        cls.virtual_machine,
                        cls.service_offering,
                        cls.account,
                        ]

    def setUp(self):

        self.apiclient = self.testClient.getApiClient()
        self.dbclient = self.testClient.getDbConnection()
        self.cleanup = []
    

    
    def test_01_local_diskoffering_create(self):
        """Test Local Disk Offering Creation 
        """
        # Validate the following
        # 1. create a disk offering with StorageType=Local
        
        # Create a Disk Offering of storage type "local"
        self.debug("creating a new disk offering of storage type local")
        self.disk_offering = DiskOffering.create(self.api_client, self.services["disk_offering"])
        list_disk_offering_response = DiskOffering.list(self.apiclient,id=self.disk_offering.id)
        self.assertEqual(isinstance(list_disk_offering_response,list), True, "listDiskOffering response did not return a list")
        self.assertEqual(list_disk_offering_response[0].storagetype, "local", "There was some issue creating the disk offering of local storage type")
        self.debug("Successfully created a new disk offering %s of storage type %s" % (
                                                                           self.disk_offering.name, 
                                                                           self.disk_offering.storagetype
                                                                           ))
        self.cleanup.append(self.disk_offering)
        return
    
    def test_02_local_diskoffering_delete(self):
        """Test Local Disk Offering Deletion 
        """
        # Validate the following
        # 1. delete disk offering with StorageType=Local
        
        # Create Disk Offering of storage type "local"
        self.debug("creating a new disk offering of storage type local")
        self.disk_offering = DiskOffering.create(self.api_client, self.services["disk_offering"])
        list_disk_offering_response = DiskOffering.list(self.apiclient,id=self.disk_offering.id)
        self.assertEqual(isinstance(list_disk_offering_response,list), True, "listDiskOffering response did not return a list")
        self.assertEqual(list_disk_offering_response[0].storagetype, "local", "There was some issue creating the disk offering of local storage type")
        
        # Delete Disk Offering of storage type "local"
        self.debug("Deleting disk offering %s of storage type %s" % (
                                                                           self.disk_offering.name, 
                                                                           self.disk_offering.storagetype
                                                                           ))
        self.disk_offering.delete(self.apiclient)
        list_disk_offering_response = DiskOffering.list(self.apiclient,id=self.disk_offering.id)
        self.assertEqual(list_disk_offering_response, None, "There was some issue deleting the disk offering of storage type local")
        self.debug("Successfully deleted disk offering %s of storage type %s" % (
                                                                           self.disk_offering.name, 
                                                                           self.disk_offering.storagetype
                                                                           ))
        return
    
    def tearDown(self):
        cleanup_resources(self.apiclient,self.cleanup)
        return
   
    @classmethod
    def tearDownClass(cls):
        try:
            cls.api_client = super(TestLocalDiskOffering, cls).getClsTestClient().getApiClient()
            cleanup_resources(cls.api_client, cls._cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return
 
class TestLocalDataAndSharedRoot(cloudstackTestCase):
    
    @classmethod
    def setUpClass(cls):
        cls.api_client = super(TestLocalDataAndSharedRoot, cls).getClsTestClient().getApiClient()
        cls.services = Services().services

        # Get Zone, Domain and templates
        cls.domain = get_domain(cls.api_client, cls.services)
        cls.zone = get_zone(cls.api_client, cls.services)
        template = get_template(
                            cls.api_client,
                            cls.zone.id,
                            cls.services["ostype"]
                            )
        cls.services["zoneid"] = cls.zone.id
        cls.services["virtual_machine"]["zoneid"] = cls.zone.id
        cls.services["virtual_machine"]["template"] = template.id

        cls.account = Account.create(
                            cls.api_client,
                            cls.services["account"],
                            domainid=cls.domain.id
                            )

        cls.services["account"] = cls.account.account.name
        cls.service_offering = ServiceOffering.create(
                                            cls.api_client,
                                            cls.services["service_offering"]
                                            )
        cls.disk_offering = DiskOffering.create(cls.api_client, cls.services["disk_offering"])
        cls.virtual_machine = VirtualMachine.create(
                                    cls.api_client,
                                    cls.services["virtual_machine"],
                                    accountid=cls.account.account.name,
                                    domainid=cls.account.account.domainid,
                                    serviceofferingid=cls.service_offering.id,
                                )
        
        cls._cleanup = [
                        cls.virtual_machine,
                        cls.service_offering,
                        cls.disk_offering,
                        cls.account,
                        ]

    def setUp(self):

        self.apiclient = self.testClient.getApiClient()
        self.dbclient = self.testClient.getDbConnection()
        self.local_volume = Volume.create(
                                          self.apiclient,
                                          self.services["volume"],
                                          zoneid=self.zone.id,
                                          account=self.account.account.name,
                                          domainid=self.account.account.domainid,
                                          diskofferingid=self.disk_offering.id,
                                          )
        self.cleanup = []
        self.cleanup.append(self.local_volume)
    
    @unittest.skip("2")
    def test_01_attach_local_volume(self):
        """Test Attach Local Data Volume
        """
        # Validate the following
        # 1. attach local volume to running VM

     
        # Attach volume to VM
        self.debug("attaching %s volume to vm %s" %(
                                                    self.local_volume.name, 
                                                    self.virtual_machine.name
                                                    ))
        self.virtual_machine.attach_volume(
                                           self.apiclient,
                                           self.local_volume
                                           )     

        # Check volume is attached successfully
        list_volume_response = list_volumes(
                                            self.apiclient,
                                            id=self.local_volume.id
                                            )   
        self.assertEqual(isinstance(list_volume_response,list), True, "Please verify %s exists" %list_volume_response[0].id)
        self.assertEqual(list_volume_response[0].state, "Ready", "There was some issue while attaching the local disk %s to vm %s" %(
                                                                                                                                        self.local_volume.name,
                                                                                                                                        self.virtual_machine.name
                                                                                                                                        ))
        self.debug("successfully attached the local disk %s to vm %s" %(
                                                                        self.local_volume.name,
                                                                        self.virtual_machine.name
                                                                        ))
        return
    

    def test_02_detach_local_volume(self):
        """Test detach Local Data Volume
        """
        # Validate the following
        # 1. detach local volume to running VM

        
        # Attach volume to VM
        self.debug("attaching %s volume to vm %s" %(
                                                    self.local_volume.name, 
                                                    self.virtual_machine.name
                                                    ))
        self.virtual_machine.attach_volume(
                                           self.apiclient,
                                           self.local_volume
                                           )     

        # Check all volumes attached to same VM
        list_volume_response = list_volumes(
                                            self.apiclient,
                                            id=self.local_volume.id
                                            )   
        self.debug("successfully attached the local disk %s to vm %s" %(
                                                                       self.local_volume.name,
                                                                       self.virtual_machine.name
                                                                       ))
        if (list_volume_response[0].state == "Ready"):
            self.debug("detaching volume %s from vm %s" %(
                                                          self.local_volume.name, 
                                                          self.virtual_machine.name
                                                          ))
            self.virtual_machine.detach_volume(
                                               self.apiclient,
                                               self.local_volume
                                               )
        list_volume_response = list_volumes(
                                            self.apiclient,
                                            id=self.local_volume.id
                                            )   
        self.assertFalse(hasattr(list_volume_response[0], 'virtualmachineid'), "There was some issue in detaching volume %s from vm %s" %(
                                                                                  self.local_volume.name, 
                                                                                  self.virtual_machine.name
                                                                                  ))
        
        if not (hasattr(list_volume_response[0], 'virtualmachineid')):
            self.debug("Successfully detached volume %s from vm %s" %(
                                                                          self.local_volume.name, 
                                                                          self.virtual_machine.name
                                                                          ))
        
    def tearDown(self):
        list_volume_response = list_volumes(
                                            self.apiclient,
                                            id=self.local_volume.id
                                            )   
        self.assertEqual(isinstance(list_volume_response,list), True, "Please verify %s exists" %list_volume_response[0].id)
        if (hasattr(list_volume_response[0], 'virtualmachineid')):
            self.virtual_machine.detach_volume(
                                               self.apiclient,
                                               self.local_volume
                                               )
        cleanup_resources(self.apiclient,self.cleanup)
        return            
    
    @classmethod
    def tearDownClass(cls):
        try:
            cls.api_client = super(TestLocalDataAndSharedRoot, cls).getClsTestClient().getApiClient()
            cleanup_resources(cls.api_client, cls._cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return