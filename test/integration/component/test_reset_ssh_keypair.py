# -*- encoding: utf-8 -*-
# Copyright 2012 Citrix Systems, Inc. Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  Citrix Systems, Inc.
# reserves all rights not expressly granted by the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Automatically generated by addcopyright.py at 04/03/2012

""" P1 tests for reset SSH keypair
"""

#Import Local Modules
from marvin.cloudstackTestCase import *
#from marvin.cloudstackAPI import *
#from integration.lib.utils import *
from integration.lib.base import *
from integration.lib.common import *
#Import System modules
import tempfile
import os


class Services:
    """Test remote SSH client Services """

    def __init__(self):
        self.services = {
                "account": {
                        "email": "test@test.com",
                        "firstname": "Test",
                        "lastname": "User",
                        "username": "test",
                        # Random characters are appended in create account to
                        # ensure unique username generated each time
                        "password": "password",
                },
                "virtual_machine": {
                        "displayname": "VM",
                        "username": "root",
                        # VM creds for SSH
                        "password": "password",
                        "ssh_port": 22,
                        "hypervisor": 'XenServer',
                        "privateport": 22,
                        "publicport": 22,
                        "protocol": 'TCP',
                },
                "service_offering": {
                        "name": "Tiny Instance",
                        "displaytext": "Tiny Instance",
                        "cpunumber": 1,
                        "cpuspeed": 100,
                        "memory": 128,
                },
            "ostype": 'CentOS 5.3 (64-bit)',
            # Cent OS 5.3 (64 bit)
            "SSHEnabledTemplate": "SSHkey",
            "SSHPasswordEnabledTemplate": "SSHKeyPassword",
            "sleep": 60,
            "timeout": 10,
            "mode": 'advanced',
        }


class TestResetSSHKeypair(cloudstackTestCase):

    def setUp(self):
        self.apiclient = self.testClient.getApiClient()
        self.dbclient = self.testClient.getDbConnection()
        self.services = Services().services
        # Get Zone, Domain and templates
        domain = get_domain(self.apiclient, self.services)
        self.zone = get_zone(self.apiclient, self.services)

        # Set Zones and disk offerings
        self.services["virtual_machine"]["zoneid"] = self.zone.id

        # Create Account, VMs, NAT Rules etc
        self.account = Account.create(
                                      self.apiclient,
                                      self.services["account"],
                                      domainid=domain.id
                                      )

        self.service_offering = ServiceOffering.create(
                                        self.apiclient,
                                        self.services["service_offering"]
                                       )
        self.keypair = SSHKeyPair.create(
                                    self.apiclient,
                                    name=random_gen() + ".pem",
                                    account=self.account.account.name,
                                    domainid=self.account.account.domainid
                                 )
        keyPairFilePath = tempfile.gettempdir() + os.sep + self.keypair.name

        f = open(keyPairFilePath, "w+")
        f.write(self.keypair.privatekey)
        f.close()

        os.system("chmod 400 " + keyPairFilePath)

        # Cleanup
        self.cleanup = [
                        self.service_offering,
                        self.account
                        ]
        self.tmp_files = [keyPairFilePath]

    def tearDown(self):
        try:
            #Clean up, terminate the created accounts, domains etc
            cleanup_resources(self.apiclient, self.cleanup)
            for tmp_file in self.tmp_files:
                os.remove(tmp_file)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return

    def test_01_reset_ssh_keys(self):
        """Test Reset SSH keys for VM  already having SSH key"""

        # Validate the following
        # 1. Create a VM  having SSH keyPair
        # 2. Stop the VM
        # 3. Reset SSH key pair. Verify VM is not restarted automatically as
        #    result of API execution. User should be able to ssh into the VM
        #    using new keypair when VM is restarted

        self.debug("Find the template with SSH key login enabled")
        template = get_template(
                                self.apiclient,
                                self.zone.id,
                                self.services["ostype"],
                                name=self.services["SSHEnabledTemplate"]
                                )

        self.debug("Deploying the virtual machine in default network offering")

        # Spawn an instance
        virtual_machine = VirtualMachine.create(
                                    self.apiclient,
                                    self.services["virtual_machine"],
                                    templateid=template.id,
                                    accountid=self.account.account.name,
                                    domainid=self.account.account.domainid,
                                    serviceofferingid=self.service_offering.id,
                                    keypair=self.keypair.name,
                                    mode=self.services["mode"]
                                    )

        self.debug("Check if the VM is properly deployed or not?")
        vms = VirtualMachine.list(
                                  self.apiclient,
                                  id=virtual_machine.id,
                                  listall=True
                                  )
        self.assertEqual(
                         isinstance(vms, list),
                         True,
                         "List VMs should return the valid list"
                         )
        vm = vms[0]
        self.assertEqual(
                         vm.state,
                         "Running",
                         "VM state should be running after deployment"
                         )
        self.debug("Stopping the virtual machine")
        try:
            virtual_machine.stop(self.apiclient)
        except Exception as e:
            self.fail("Failed to stop virtual machine: %s, %s" %
                                                    (virtual_machine.id, e))

        self.debug("Creating a new SSH keypair for account: %s" %
                                                    self.account.account.name)
        new_keypair = SSHKeyPair.create(
                                    self.apiclient,
                                    name=random_gen() + ".pem",
                                    account=self.account.account.name,
                                    domainid=self.account.account.domainid
                                 )
        self.debug("Created a new keypair with name: %s" % new_keypair.name)

        self.debug("Writing the private key to local file")
        keyPairFilePath = tempfile.gettempdir() + os.sep + new_keypair.name
        # Clenaup at end of execution
        self.tmp_files.append(keyPairFilePath)

        self.debug("File path: %s" % keyPairFilePath)

        f = open(keyPairFilePath, "w+")
        f.write(new_keypair.privatekey)
        f.close()

        os.system("chmod 400 " + keyPairFilePath)

        self.debug("Resetting the SSH key pair for instance: %s" %
                                                        virtual_machine.name)
        try:
            virtual_machine.resetSshKey(
                                        self.apiclient,
                                        keypair=new_keypair.name,
                                        name=new_keypair.name,
                                        account=self.account.account.name,
                                        domainid=self.account.account.domainid
                                        )
        except Exception as e:
            self.fail("Failed to reset SSH key: %s, %s" %
                                                (virtual_machine.name, e))
        self.debug("Starting the virtual machine after resetting the keypair")
        try:
            virtual_machine.start(self.apiclient)
        except Exception as e:
            self.fail("Failed to start virtual machine: %s, %s" %
                                                    (virtual_machine.name, e))

        self.debug("SSH key path: %s" % str(keyPairFilePath))
        try:
            virtual_machine.get_ssh_client(keyPairFileLocation=str(keyPairFilePath))
        except Exception as e:
            self.fail("Failed to SSH into VM with new keypair: %s, %s" %
                                                    (virtual_machine.name, e))
        return

    def test_02_reset_ssh_key_password_enabled_template(self):
        """Reset SSH keys for VM  created from password enabled template and
            already having SSH key """

        # Validate the following
        # 1. Create VM from password enabled template and having SSH keyPair
        # 2. Stop the VM
        # 3. Reset SSH key pair. Verify VM is not restarted automatically
        #    as a result of API execution
        #    User should be able to ssh into the VM  using new keypair
        #    User should be able to login into VM using new password
        #    returned by  the API

        self.debug("Find the template with SSH key and password enabled")
        template = get_template(
                            self.apiclient,
                            self.zone.id,
                            self.services["ostype"],
                            name=self.services["SSHPasswordEnabledTemplate"]
                            )

        self.debug("Deploying the virtual machine in default network offering")

        # Spawn an instance
        virtual_machine = VirtualMachine.create(
                        self.apiclient,
                        self.services["virtual_machine"],
                        templateid=template.id,
                        accountid=self.account.account.name,
                        domainid=self.account.account.domainid,
                        serviceofferingid=self.service_offering.id,
                        keypair=self.keypair.name,
                        mode=self.services["mode"]
                        )

        self.debug("Check if the VM is properly deployed or not?")
        vms = VirtualMachine.list(
                                  self.apiclient,
                                  id=virtual_machine.id,
                                  listall=True
                                  )
        self.assertEqual(
                         isinstance(vms, list),
                         True,
                         "List VMs should return the valid list"
                         )
        vm = vms[0]
        self.assertEqual(
                         vm.state,
                         "Running",
                         "VM state should be running after deployment"
                         )
        self.debug("Stopping the virtual machine")
        try:
            virtual_machine.stop(self.apiclient)
        except Exception as e:
            self.fail("Failed to stop virtual machine: %s, %s" %
                                                    (virtual_machine.id, e))

        self.debug("Creating a new SSH keypair for account: %s" %
                                                    self.account.account.name)
        new_keypair = SSHKeyPair.create(
                                    self.apiclient,
                                    name=random_gen() + ".pem",
                                    account=self.account.account.name,
                                    domainid=self.account.account.domainid
                                 )
        self.debug("Created a new keypair with name: %s" % new_keypair.name)

        self.debug("Writing the private key to local file")
        keyPairFilePath = tempfile.gettempdir() + os.sep + new_keypair.name

        self.debug("File path: %s" % keyPairFilePath)

        f = open(keyPairFilePath, "w+")
        f.write(new_keypair.privatekey)
        f.close()

        os.system("chmod 400 " + keyPairFilePath)

        self.debug("Resetting the SSH key pair for instance: %s" %
                                                        virtual_machine.name)
        try:
            virtual_machine.resetSshKey(
                                        self.apiclient,
                                        keypair=new_keypair.name,
                                        name=new_keypair.name,
                                        account=self.account.account.name,
                                        domainid=self.account.account.domainid
                                        )
        except Exception as e:
            self.fail("Failed to reset SSH key: %s, %s" %
                                                (virtual_machine.name, e))
        self.debug("Starting the virtual machine after resetting the keypair")
        try:
            virtual_machine.start(self.apiclient)
        except Exception as e:
            self.fail("Failed to start virtual machine: %s, %s" %
                                                    (virtual_machine.name, e))
        self.debug("SSHing with new keypair")
        try:
            virtual_machine.get_ssh_client(
                                    keyPairFileLocation=str(keyPairFilePath))
        except Exception as e:
            self.fail("Failed to SSH into VM with new keypair: %s, %s" %
                                                    (virtual_machine.name, e))
        return

