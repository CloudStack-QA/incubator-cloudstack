# -*- encoding: utf-8 -*-
# Copyright 2012 Citrix Systems, Inc. Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  Citrix Systems, Inc.
# reserves all rights not expressly granted by the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Automatically generated by addcopyright.py at 04/03/2012

""" P1 tests for Snapshots Improvements
"""
#Import Local Modules
from nose.plugins.attrib import attr
import threading
from urlparse import urlparse
from marvin.cloudstackTestCase import cloudstackTestCase, unittest
from marvin.integration.lib.utils import (random_gen)
from marvin.integration.lib.base import (
                                        Account,
                                        ServiceOffering,
                                        VirtualMachine,
                                        Snapshot,
                                        Template,
                                        Volume,
                                        Host
                                        )
from marvin.integration.lib.common import (get_domain,
                                        get_zone,
                                        get_template,
                                        cleanup_resources,
                                        )
from marvin import remoteSSHClient
import time
import logging

class Services:
    """Test Snapshots improvement Services
    """

    def __init__(self):
        self.services = {
                        "account": {
                                    "email": "test@test.com",
                                    "firstname": "Test",
                                    "lastname": "User",
                                    "username": "test",
                                    # Random characters are appended for unique
                                    # username
                                    "password": "password",
                         },
                         "service_offering": {
                                    "name": "Tiny Instance",
                                    "displaytext": "Tiny Instance",
                                    "cpunumber": 1,
                                    "cpuspeed": 100, # in MHz
                                    "memory": 128, # In MBs
                        },
                        "disk_offering": {
                                    "displaytext": "Small Disk Offeering",
                                    "name": "Small Disk Offering",
                                    "disksize": 1
                        },
                        "virtual_machine": {
                                    "displayname": "TestVM",
                                    "username": "root",
                                    "password": "password",
                                    "ssh_port": 22,
                                    "hypervisor": 'XenServer',
                                    "privateport": 22,
                                    "publicport": 22,
                                    "protocol": 'TCP',
                                },
                        "diskdevice": "/dev/xvda",
                        "diskname": "TestDiskServ",
                        "size": 1, # GBs

                        "mount_dir": "/mnt/tmp",
                        "sub_dir": "test",
                        "sub_lvl_dir1": "test1",
                        "sub_lvl_dir2": "test2",
                        "random_data": "random.data",

                        "ostype": 'CentOS 5.3 (64-bit)',
                        "NumberOfThreads": 1,
                        "sleep": 60,
                        "timeout": 10,
                        "mode": 'advanced', # Networking mode: Advanced, Basic
                    }


class createThread(threading.Thread, cloudstackTestCase):

    def __init__(self, target, *args):
        self._target = target
        self._args = args
        threading.Thread.__init__(self)
        cloudstackTestCase.__init__(self, args)

    def run(self):
        self._target(*self._args)


class TestCreateSnapshot(cloudstackTestCase):

    @classmethod
    def setUpClass(cls):
        cls.api_client = super(
                               TestCreateSnapshot,
                               cls).getClsTestClient().getApiClient()
        cls.services = Services().services
        # Get Zone, Domain and templates
        cls.domain = get_domain(cls.api_client, cls.services)
        cls.zone = get_zone(cls.api_client, cls.services)

        cls.template = get_template(
                            cls.api_client,
                            cls.zone.id,
                            cls.services["ostype"]
                            )

        cls.services["virtual_machine"]["zoneid"] = cls.zone.id

        # Create VMs, NAT Rules etc
        cls.account = Account.create(
                            cls.api_client,
                            cls.services["account"],
                            domainid=cls.domain.id
                            )
        cls.service_offering = ServiceOffering.create(
                                            cls.api_client,
                                            cls.services["service_offering"]
                                            )
        cls._cleanup = [
                        cls.service_offering,
                        cls.account,
                        ]
        return

    @classmethod
    def tearDownClass(cls):
        try:
            #Cleanup resources used
            cleanup_resources(cls.api_client, cls._cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return

    def setUp(self):
        self.apiclient = self.testClient.getApiClient()
        self.dbclient = self.testClient.getDbConnection()
        self.cleanup = []
        return

    def tearDown(self):
        try:
            #Clean up, terminate the created instance, volumes and snapshots
            cleanup_resources(self.apiclient, self.cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return

    def check_ssh_into_vm(self, vm, public_ip, testnegative=False):
        self.debug(
            "Checking if we can SSH into VM=%s on public_ip=%s" %
                                    (vm.name, public_ip.ipaddress.ipaddress))
        try:
            vm.get_ssh_client(ipaddress=public_ip.ipaddress.ipaddress)
            if not testnegative:
                self.debug("SSH into VM=%s on public_ip=%s is successfully" %
                                    (vm.name, public_ip.ipaddress.ipaddress))
            else:
                self.fail("SSH into VM=%s on public_ip=%s is successfully" %
                                    (vm.name, public_ip.ipaddress.ipaddress))
        except:
            if not testnegative:
                self.fail("Failed to SSH into VM - %s" %
                                            (public_ip.ipaddress.ipaddress))
            else:
                self.debug("Failed to SSH into VM - %s" %
                                            (public_ip.ipaddress.ipaddress))

    def create_VM(self, host_id=None):
        try:
            self.debug('Creating VM for account=%s' %
                                            self.account.account.name)
            vm = VirtualMachine.create(
                                    self.apiclient,
                                    self.services["virtual_machine"],
                                    templateid=self.template.id,
                                    accountid=self.account.account.name,
                                    domainid=self.account.account.domainid,
                                    serviceofferingid=self.service_offering.id,
                                    hostid=host_id,
                                    mode=self.services["mode"]
                                    )
            self.debug('Created VM=%s in account=%s' %
                                        (vm.id, self.account.account.name))
            return vm
        except Exception as e:
            self.fail('Unable to deploy VM in a account=%s - %s' %
                                                (self.account.account.name, e))

    def stop_VM(self, virtual_machine):
        try:
            self.debug("Stopping the virtual machine")
            virtual_machine.stop(self.apiclient)
            self.debug("Checking VM state")
        except Exception as e:
            self.fail("Failed to stop virtual machine - %s, %s" %
                                                (virtual_machine.name, e))
        vms = VirtualMachine.list(
                                      self.apiclient,
                                      id=virtual_machine.id,
                                      listall=True
                                      )
        self.assertEqaul(
                        isinstance(vms, list),
                        True,
                        "List virtual machines should return valid response"
                         )
        vm = vms[0]
        self.assertEqual(
                             vm.state,
                             "Stopped",
                             "VM state should be stopped after API call"
                             )
        return

    def create_Snapshot_On_Root_Disk(self, virtual_machine):
        try:
            volumes = Volume.list(
                                  self.apiclient,
                                  virtualmachineid=virtual_machine.id,
                                  type='ROOT',
                                  listall=True
                                  )
            self.assertEqual(
                            isinstance(volumes, list),
                            True,
                            "Check list response returns a valid list"
                        )
            volume = volumes[0]

            #Create a snapshot of volume
            snapshot = Snapshot.create(
                                   self.apiclient,
                                   volume.id,
                                   account=self.account.account.name,
                                   domainid=self.account.account.domainid
                                   )
            self.debug("Snapshot created from volume ID: %s" % volume.id)
            return snapshot
        except Exception as e:
            self.fail('Unable to create snapshot: %s' % e)

    def create_Dummy_Data_On_Root_Disk(self, ssh):
        try:
            random_data_0 = random_gen(100)
            random_data_1 = random_gen(100)
            cmds = [
                    "mkdir -p %s" % self.services["mount_dir"],
                    "mount %s1 %s" % (
                                      self.services["rootdisk"],
                                      self.services["mount_dir"]
                                      ),
                    "mkdir -p %s/%s/{%s,%s} " % (
                                                self.services["mount_dir"],
                                                self.services["sub_dir"],
                                                self.services["sub_lvl_dir1"],
                                                self.services["sub_lvl_dir2"]
                                            ),
                    "echo %s > %s/%s/%s/%s" % (
                                                random_data_0,
                                                self.services["mount_dir"],
                                                self.services["sub_dir"],
                                                self.services["sub_lvl_dir1"],
                                                self.services["random_data"]
                                            ),
                    "echo %s > %s/%s/%s/%s" % (
                                                random_data_1,
                                                self.services["mount_dir"],
                                                self.services["sub_dir"],
                                                self.services["sub_lvl_dir2"],
                                                self.services["random_data"]
                                        ),
                    "sync",
                    "umount %s" % (self.services["mount_dir"]),
                ]
            for c in cmds:
                self.debug("Command: %s" % c)
                self.debug("Result: %s" % ssh.execute(c))
        except Exception as e:
            self.fail(
                "Failed to create dummy data on ROOT disk of VM: %s" % e)
            return

    def get_Host_For_Migration(self, vm):
        try:
            hosts = Host.list(
                              self.apiclient,
                              zoneid=self.zone.id,
                              virtualmachineid=vm.id,
                              listall=True
                              )
            if not isinstance(hosts, list):
                self.fail(
                    "Failed to find suitable host for vm migration: %s" %
                                                                    vm.name)
            else:
                return hosts[0].id
        except Exception as e:
            self.fail("Failed to find suitable host for migration: %s" % e)

    def migrate_VM(self, vm):
        try:
            self.debug("Migrating vm: %s to host" % vm.id)
            hostid=self.get_Host_For_Migration(vm)
            vm.migrate(
                        self.apiclient,
                        hostid=hostid
                       )
            self.debug("Migrated vm: %s to host: %s" % (vm.id, hostid))
        except Exception as e:
            self.fail("Failed to migrate vm: %s to host: %s - %s" %
                                                    (vm.id, hostid, e))

    def create_Template_from_Snapshot(self, snapshot):
        try:
            self.debug("Creating template from snapshot: %s" % snapshot.name)
            template = Template.create_from_snapshot(
                                        self.apiclient,
                                        snapshot=snapshot,
                                        services=self.services["template"])
            self.debug("Created template: %s from snapshot: %s" %
                                            (template.name, snapshot.name))

            self.debug("Verifying if template created properly or not?")
            templates = Template.list(
                                self.apiclient,
                                templatefilter=self.services["templates"]["templatefilter"],
                                id=template.id)
            self.assertNotEqual(templates,
                            None,
                            "Check if result exists in list item call")

            self.assertEqual(templates[0].isready,
                         True,
                        "Check new template state in list templates call")

            return template
        except Exception as e:
            self.fail("Failed to create template from snapshot: %s - %s" %
                                                        (snapshot.name, e))

    def create_Volume_from_Snapshot(self, snapshot):
        try:
            self.debug("Creating volume from snapshot: %s" % snapshot.name)
            volume = Volume.create_from_snapshot(
                                        self.apiclient,
                                        snapshot_id=snapshot.id,
                                        services=self.services["volume"],
                                        account=self.account.account.name,
                                        domainid=self.account.account.domainid
                                        )
            self.debug("Created volume: %s from snapshot: %s" %
                                            (volume.name, snapshot.name))

            self.debug("Verifying if volume created properly or not?")
            volumes = Volume.list(self.apiclient, id=volume.id, listall=True)

            self.assertNotEqual(volumes,
                            None,
                            "Check if result exists in list item call")

            self.debug("Volume: %s, state: %s" % (volume.name, volume.state))
            self.assertEqual(volumes[0].state,
                         "Allocated",
                        "Check new volume state in list volumes call")

            return volume
        except Exception as e:
            self.fail("Failed to create volume from snapshot: %s - %s" %
                                                        (snapshot.name, e))

    def create_Snapshot_Migrate_VM(self):
        """Creates a virtual machine and take a snapshot on root disk

            1. Create a virtual machine
            2. SSH into virtual machine
            3. Create dummy folders on the ROOT disk of the virtual machine
            4. Take a snapshot of ROOT disk"""

        self.debug("Deploying VM for account: %s" % self.account.account.name)
        vm = self.create_VM()
        self.debug("Creating dummy data on ROOT disk of vm: %s" % vm.name)
        self.create_Dummy_Data_On_Root_Disk(ssh=vm.get_ssh_client())
        self.debug("Stop virtual machine: %s" % vm.name)
        self.stop_VM(vm)

        self.debug(
            "Create thread to live migrate the virtual machine: %s" % vm.name)
        m = createThread("migrate_vm", vm)
        m.start()

        self.debug("Create snapshot on ROOT disk")
        self.create_Snapshot_On_Root_Disk(vm)
        return

    def create_VM_Migrate_Snaphot_RootDisk(self):
        """Creates a virtual machine and take a snapshot on root disk

            1. Create a virtual machine
            2. SSH into virtual machine
            3. Create dummy folders on the ROOT disk of the virtual machine
            4. Migrate to another host
            5. Take a snapshot of ROOT disk"""

        self.debug("Deploying VM for account: %s" % self.account.account.name)
        vm = self.create_VM()
        self.debug("Creating dummy data on ROOT disk of vm: %s" % vm.name)
        self.create_Dummy_Data_On_Root_Disk(ssh=vm.get_ssh_client())

        self.debug("Live migrate the virtual machine: %s" % vm.name)
        self.migrate_VM(vm)

        self.debug("Stop virtual machine: %s" % vm.name)
        self.stop_VM(vm)

        self.debug("Create snapshot on ROOT disk")
        self.create_Snapshot_On_Root_Disk(vm)
        return

    def create_VM_Snaphot_RootDisk(self):
        """Creates a virtual machine and take a snapshot on root disk

            1. Create a virtual machine
            2. SSH into virtual machine
            3. Create dummy folders on the ROOT disk of the virtual machine
            4. Take a snapshot of ROOT disk"""

        self.debug("Deploying VM for account: %s" % self.account.account.name)
        vm = self.create_VM()
        self.debug("Creating dummy data on ROOT disk of vm: %s" % vm.name)
        self.create_Dummy_Data_On_Root_Disk(ssh=vm.get_ssh_client())
        self.debug("Create snapshot on ROOT disk")
        self.create_Snapshot_On_Root_Disk(vm)
        return

    def create_Snaphot_Stop_VM(self):
        """Creates a snapshot on ROOT disk while vm is in stopping state

            1. Create a virtual machine
            2. SSH into virtual machine
            3. Create dummy folders on the ROOT disk of the virtual machine
            4. Create snapshot on ROOT disk
            5. Stop virtual machine while snapshots are taken on ROOT disk"""

        self.debug("Deploying VM for account: %s" % self.account.account.name)
        vm = self.create_VM()
        self.debug("Creating dummy data on ROOT disk of vm: %s" % vm.name)
        self.create_Dummy_Data_On_Root_Disk(ssh=vm.get_ssh_client())

        self.debug("Create thread to stop virtual machine: %s" % vm.name)
        m = createThread("stop_VM", vm)
        m.start()

        self.debug("Create snapshot on ROOT disk")
        self.create_Snapshot_On_Root_Disk(vm)
        return

    def verify_Snapshots_On_Secondary_Storage(self, snapshot):

        qresultset = self.dbclient.execute("select backup_snap_id, account_id, volume_id from snapshots where uuid = '%s';" % snapshot.id)

        self.assertEqual(isinstance(qresultset, list),
                         True,
                         "Check DBQuery returns a valid list"
                        )
        self.assertNotEqual(len(qresultset), 0, "Check DB Query result set")

        qresult = qresultset[0]
        snapshot_uuid = qresult[0]      # backup_snap_id = snapshot UUID
        account_id = qresult[1]
        volume_id = qresult[2]

        # Get the Secondary Storage details from  list Hosts
        hosts = Host.list(self.apiclient,
                           type='SecondaryStorage',
                           zoneid=self.zone.id)
        self.assertEqual(isinstance(hosts, list),
                         True,
                         "Check list response returns a valid list")
        uuids = []
        for host in hosts:
            # host.name = "nfs://192.168.100.21/export/test"
            parse = urlparse(host.name)
            sec_storage_ip = parse.netloc
            storage_type = parse.scheme
            export_path = parse.path

            try:
                # Login to VM to check snapshot present on sec disk
                ssh_client = remoteSSHClient(
                                    self.apiclient.connection.mgtSrv,
                                    22,
                                    self.apiclient.connection.user,
                                    self.apiclient.connection.passwd,
                                    )

                cmds = [
                    "mkdir -p %s" % self.services["mount_dir"],
                    "mount -t %s %s/%s %s" % (
                                         storage_type,
                                         sec_storage_ip,
                                         export_path,
                                         self.services["mount_dir"]
                                         ),
                    "ls %s/snapshots/%s/%s" % (
                                               self.services["mount_dir"],
                                               account_id,
                                               volume_id),
                ]

                for c in cmds:
                    result = ssh_client.execute(c)
                uuids.append(result)

                # Unmount the Sec Storage
                cmds = [
                    "umount %s" % (self.services["mount_dir"]),
                    ]
                for c in cmds:
                    result = ssh_client.execute(c)
            except Exception as e:
                raise Exception(
                        "SSH access failed for management server: %s - %s" %
                                    (self.apiclient.connection.mgtSvr, e))

        res = str(uuids)
        self.assertEqual(
                        res.count(snapshot_uuid),
                        1,
                        "Check snapshot UUID in secondary storage and database"
                        )
        return

    def get_Snapshots_For_Account(self, account, domainid):
        try:
            snapshots = Snapshot.list(
                                      self.apiclient,
                                      account=account,
                                      domainid=domainid,
                                      listall=True
                                      )
            self.assertEqual(
                             isinstance(snapshots, list),
                             True,
                             "List snapshots shall return a valid list"
                             )
            return snapshots
        except Exception as e:
            self.fail("Failed to fetch snapshots for account: %s - %s" %
                                                                (account, e))

    def verify_Snapshots(self):
        try:
            snapshots = self.get_Snapshots_For_Account(
                                            self.account.account.name,
                                            self.account.account.domainid)
            self.assertEqual(
                    len(snapshots),
                    int(self.services["NumberOfThreads"]),
                    "No of snapshots should equal to no of threads spawned"
                 )
            for snapshot in snapshots:
                self.verify_Snapshots_On_Secondary_Storage(snapshot)
        except Exception as e:
            self.fail("Failed to verify snapshots created: %s" % e)

    def wait_for_threads(self, threads):
        """Waits till execution of all threads is complete"""

        self.debug("Waits till all active threads finished execution")
        for th in threads:
            if th.is_alive():
                self.debug("Thread th: %s is still running" % th.name)
                time.sleep(self.services["sleep"])
        return

    @attr(speed="slow")
    @attr(tags=["advanced", "advancedns"])
    @attr(configuration='concurrent.snapshots.threshold.perhost')
    @unittest.skip("skip")
    def test_01_concurrent_snapshots_live_migrate(self):
        """Test perform concurrent snapshots and migrate the vm from one host
            to another

            1.Configure the concurrent.snapshots.threshold.perhost=3
            2.Deploy a Linux VM using default CentOS template, use small
            service offering, disk offering
            3.Log into the VM and create a file with content in it.
            4.repeat step 2 to 3 for 10 times to create 10 vms
            5.Perform snapshot on the root disk of this newly created VMs"""

        # Validate the following
        # a. Check all snapshots jobs are running concurrently on backgrounds
        # b. listSnapshots should list this newly created snapshot.
        # c. Verify secondary_storage NFS share contains the required volume
        #    under /secondary/snapshots/$accountid/$volumeid/$snapshot_uuid
        # d. Verify backup_snap_id was non null in "snapshots"table

        threads = []
        for x in xrange(self.services["NumberOfThreads"]):
            self.debug(
                "Create virtual machine and snapshot on ROOT disk thread")
            th = createThread(target=self.create_Snapshot_Migrate_VM)
            th.start()
            threads.append(th)

        self.debug("Wait till all threads are finished executing")
        self.wait_for_threads(threads)

        self.debug("Verify whether snapshots were created properly or not?")
        self.verify_Snapshots()
        return

    @attr(speed="slow")
    @attr(tags=["advanced", "advancedns"])
    @attr(configuration='concurrent.snapshots.threshold.perhost')
    @unittest.skip("skip")
    def test_02_live_migrate_concurrent_snapshots(self):
        """Test perform concurrent snapshots on volumes belongs to stopped VM

            1. Configure the concurrent.snapshots.threshold.perhost=3
            2. Deploy a Linux VM using default CentOS template, use small
               service offering, disk offering
            3. Log into the VM and create a file with content in it.
            4. repeat step 2 to 3 for 4 times to create vms
            5. perform VM live migration for 2 vms out of 4 vms to another host
            6. Stop all the running VM
            7. Perform snapshot on the root disk Vms(all 4 vms root volumes)"""

        # Validate the following
        # a. Vms should successfully  migrated to another host. Stop VM
        #    operation should be successful.
        # b. Check all snapshots jobs are running concurrently on backgrounds
        # c. listSnapshots should list this newly created snapshot.
        # d. Verify secondary_storage NFS share contains the required volume
        #    under /secondary/snapshots/$accountid/$volumeid/$snapshot_uuid.
        # e. Verify backup_snap_id was non null in "snapshots"table

        threads = []
        for x in xrange(self.services["NumberOfThreads"]):
            self.debug(
                "Create virtual machine and snapshot on ROOT disk thread")
            th = createThread("create_VM_Migrate_Snaphot_RootDisk")
            th.start()
            threads.append(th)

        self.debug("Wait till all threads are finished executing")
        self.wait_for_threads(threads)

        self.debug("Verify whether snapshots were created properly or not?")
        self.verify_Snapshots()
        return

    @attr(speed="slow")
    @attr(tags=["advanced", "advancedns"])
    @attr(configuration='concurrent.snapshots.threshold.perhost')
    @unittest.skip("skip")
    def test_03_stop_vm_concurrent_snapshots(self):
        """Test stop running VM while performing concurrent snapshot on volume

            1.Configure the concurrent.snapshots.threshold.perhost=3
            2.Deploy a Linux VM using default CentOS template, use small
            service offering, disk offering
            3.Log into the VM and create a file with content in it.
            4.repeat step 2 to 3 for 4times to create 4vms
            5.Perform snapshot on root disk of this newly created VMs(4 vms)
            6.stop the running Vms while snapshot on volume in progress"""

        # Validate the following
        # a. check all snapshots jobs are running concurrently on back grounds
        # b. listSnapshots should list this newly created snapshot.
        # c. Verify secondary_storage NFS share contains the required volume
        #    under /secondary/snapshots/$accountid/$volumeid/$snapshot_uuid.
        # d. Verify backup_snap_id was non null in "snapshots"table

        threads = []
        for x in xrange(self.services["NumberOfThreads"]):
            self.debug(
                "Create virtual machine and snapshot on ROOT disk thread")
            th = createThread("create_Snaphot_Stop_VM")
            th.start()
            threads.append(th)

        self.debug("Wait till all threads are finished executing")
        self.wait_for_threads(threads)

        self.debug("Verify whether snapshots were created properly or not?")
        self.verify_Snapshots()
        return

    @attr(speed="slow")
    @attr(tags=["advanced", "advancedns"])
    @attr(configuration='concurrent.snapshots.threshold.perhost')
    @unittest.skip("skip")
    def test_04_concurrent_snapshots_create_template(self):
        """Test while parent concurrent snapshot job in progress,create
            template from completed snapshot

            1.Configure the concurrent.snapshots.threshold.perhost=3
            2.Deploy a Linux VM using default CentOS template, use small
            service offering, disk offering
            3.Log into the VM and create a file with content in it.
            4.repeat step 2 to 3 for 10 times to create 10 vms
            5.Perform snapshot on root disk of this newly created VMs(10 vms)
            6.while parent concurrent snapshot job in progress,create template
            from completed snapshot"""

        # Validate the following
        # a.Able to create Template from snapshots
        # b.check all snapshots jobs are running concurrently on back grounds
        # c.listSnapshots should list this newly created snapshot.
        # d.Verify secondary_storage NFS share contains the required volume
        #   under /secondary/snapshots/$accountid/$volumeid/$snapshot_uuid.
        # e. Verify backup_snap_id was non null in "snapshots"table

        threads = []
        for x in xrange(self.services["NumberOfThreads"]):
            self.debug(
                "Create virtual machine and snapshot on ROOT disk thread")
            th = createThread("create_VM_Snaphot_RootDisk")
            th.start()
            threads.append(th)

        self.debug("Wait till all threads are finished executing")
        self.wait_for_threads(threads)
        self.debug("Verify whether snapshots were created properly or not?")
        self.verify_Snapshots()

        self.debug("Fetch the list of snapshots belong to account: %s" %
                                                    self.account.account.name)
        snapshots = self.get_Snapshots_For_Account(
                                                self.account.account.name,
                                                self.account.account.domainid)
        # Empty the threads list
        del threads[:]
        for snapshot in snapshots:
            self.debug(
                "Create a thread for creating template from snapshot: %s" %
                                                                snapshot.name)
            th = createThread("create_Template_from_Snapshot", snapshot)
            th.start()
            threads.append(th)
        self.debug("Test completed successfully.")
        return

    @attr(speed="slow")
    @attr(tags=["advanced", "advancedns"])
    @attr(configuration='concurrent.snapshots.threshold.perhost')
    @unittest.skip("skip")
    def test_05_concurrent_snapshots_create_volume(self):
        """Test while parent concurrent snapshot job in progress,create volume
            from completed snapshot

            1.Configure the concurrent.snapshots.threshold.perhost=3
            2.Deploy a Linux VM using default CentOS template, use small
            service offering, disk offering
            3.Log into the VM and create a file with content in it.
            4.repeat step 2 to 3 for 10 times to create 10 vms
            5.Perform snapshot on root disk of this newly created VMs(10 vms)
            6.while parent concurrent snapshot job in progress,create volume
            from completed snapshot"""

        # Validate the following
        # a.Able to create Volume from snapshots
        # b.check all snapshots jobs are running concurrently on back grounds
        # c.listSnapshots should list this newly created snapshot.
        # d.Verify secondary_storage NFS share contains the required volume
        #   under /secondary/snapshots/$accountid/$volumeid/$snapshot_uuid.
        # e. Verify backup_snap_id was non null in "snapshots"table

        threads = []
        for x in xrange(self.services["NumberOfThreads"]):
            self.debug(
                "Create virtual machine and snapshot on ROOT disk thread")
            th = createThread("create_VM_Snaphot_RootDisk")
            th.start()
            threads.append(th)

        self.debug("Wait till all threads are finished executing")
        self.wait_for_threads(threads)
        self.debug("Verify whether snapshots were created properly or not?")
        self.verify_Snapshots()

        self.debug("Fetch the list of snapshots belong to account: %s" %
                                                    self.account.account.name)
        snapshots = self.get_Snapshots_For_Account(
                                                self.account.account.name,
                                                self.account.account.domainid)
        # Empty the threads list
        del threads[:]
        for snapshot in snapshots:
            self.debug(
                "Create a thread for creating volume from snapshot: %s" %
                                                                snapshot.name)
            th = createThread("create_Volume_from_Snapshot", snapshot)
            th.start()
            threads.append(th)
        self.debug("Test completed successfully.")
        return
